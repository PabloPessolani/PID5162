UML AS A NODE
=============

UML como NODO Autonomo
======================
Se puede hacer M3IPC entre procesos dentro del UML y con proxy TCP hacia el HOST u otro nodo.
Esto no requiere modificaciones en el codigo original.
Se compila un kernel UML con su version IPC.
Se compila el kernel del HOST en su version IOCTL.
Se usa proxy TCP porque esta soportado como protocolo en UML
Se debe utilizar un bridge hacia el host.


TOPOLOGIA
   -----------------                    -----------
   |     HOST      |   192.168.1.10     |   UML   |
   |     NODE0     |--------br0---------|  NODE1  |
   |               |                    |         |
   -----------------                    -----------
  eth0:192.168.1.100			HTAP=eth0=192.168.1.101

Se instala un kernel normal
Se instala el directorio /usr/src/dvs 

=================== compilacion del kernel y utilitarios del HOST =================
Se incluyen los archivos fuentes de DVKIPC en usr/src/linux/ipc 
incluida la carpeta dvk-mod 

Se copia el archivo de configuracion del kernel del HOST
	cp UMLaaN-host.config usr/src/linux/.config

Se compila el kernel del HOST 
	make menuconfig
	sudo make -j 4 && sudo make modules_install -j 4 && sudo make install -j 4
	update-initramfs -c -k 4.9.88
	update-grub  
	update-grub2

Se compilan las librerias dvs/dvk-lib en su version CONFIG_DVKIOCTL
Se compilan todos los programas para realizar pruebas locales.
Una vez realizadas las pruebas locales, el archivo dvk.ko debe quedar instalado
en dvs/dvk-mod 

=================== compilacion del kernel y utilitarios de UML =================
Se copia el archivo de configuracion 
	cp UMLaaN-guest.config usr/src/linux/.config

Se compila el kernel UML con el archivo
	make ARCH=um clean 
	make ARCH=um
	
Se compilan las librerias dvs/dvk-lib en su version CONFIG_DVKIPC 
Se hace un tar del directorio DVS 
	cd /usr/src/
	tar cvzf dvs.tar.gz ./dvs 

Se monta la particion que va a ser utilizada por el UML como su root
    mount /dev/sdb6 /mnt
Se instala el directorio dvs en ese filesystem
    cd /mnt/usr/src 
	tar xvzf /usr/src/dvs.tar.gz 
ATENCION con el tamaÃ±o que exige de disco libre !!!!!!!!!!
Desmontar la particion
	cd /
	umount /mnt 
	
==================== Creacion de la red entre HOST-UML ===================

EN EL HOST (node0)
		tunctl -u root -t HTAP
		brctl addbr br0
		echo 0 > /sys/devices/virtual/net/br0/bridge/multicast_snooping
		ifconfig HTAP 0.0.0.0 up
		brctl addif br0 HTAP	
		ifconfig br0 192.168.1.10 netmask 255.255.255.0 promisc up 
		route add -host node1 dev br0
	
EN HOST 
		root@node0:/usr/src/linux# brctl show
		bridge name     bridge id               STP enabled     interfaces
		br0             8000.6e057f3ca5e7       no              HTAP

		root@node0:/usr/src/linux# brctl showmacs br0
		port no mac addr                is local?       ageing timer
		  1     6e:05:7f:3c:a5:e7       yes                0.00
		  1     6e:05:7f:3c:a5:e7       yes                0.00
		  1     fe:fd:c0:a8:00:fd       no                13.01

		root@node0:/usr/src/linux# ifconfig
		HTAP: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
				inet6 fe80::6c05:7fff:fe3c:a5e7  prefixlen 64  scopeid 0x20<link>
				ether 6e:05:7f:3c:a5:e7  txqueuelen 1000  (Ethernet)
				RX packets 6524  bytes 806532 (787.6 KiB)
				RX errors 0  dropped 0  overruns 0  frame 0
				TX packets 16829  bytes 18328046 (17.4 MiB)
				TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

		br0: flags=4419<UP,BROADCAST,RUNNING,PROMISC,MULTICAST>  mtu 1500
				inet 192.168.1.10  netmask 255.255.255.0  broadcast 192.168.1.255
				inet6 fe80::6c05:7fff:fe3c:a5e7  prefixlen 64  scopeid 0x20<link>
				ether 6e:05:7f:3c:a5:e7  txqueuelen 1000  (Ethernet)
				RX packets 6524  bytes 715196 (698.4 KiB)
				RX errors 0  dropped 0  overruns 0  frame 0
				TX packets 6296  bytes 17632720 (16.8 MiB)
				TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

		eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
				inet 192.168.1.100  netmask 255.255.255.0  broadcast 192.168.1.255
				inet6 fe80::20c:29ff:fe9a:7aa4  prefixlen 64  scopeid 0x20<link>
				ether 00:0c:29:9a:7a:a4  txqueuelen 1000  (Ethernet)
				RX packets 38244  bytes 2916252 (2.7 MiB)
				RX errors 0  dropped 0  overruns 0  frame 0
				TX packets 52999  bytes 10283758 (9.8 MiB)
				TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
				device interrupt 19  base 0x2000  

		lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
				inet 127.0.0.1  netmask 255.0.0.0
				inet6 ::1  prefixlen 128  scopeid 0x10<host>
				loop  txqueuelen 1  (Local Loopback)
				RX packets 43976  bytes 3081488 (2.9 MiB)
				RX errors 0  dropped 0  overruns 0  frame 0
				TX packets 43976  bytes 3081488 (2.9 MiB)
				TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

		
===================== ARRANCAR DVS EN HOST Y UML ===============================================

EN HOST
		cd /usr/src/dvs/dvk-tests/
		./tests.sh 0 0 
		. /dev/shm/DC0.sh		

EN OTRA SESION, ARRANCAR UML 
		cd /usr/src/linux
		. /dev/shm/DC0.sh		
		nsenter -p -t $DC0 ./linux con0=null,fd:2 con1=fd:0,fd:1 con=null ssl=null umid=node1 ubda=/dev/sdb6 rw mem=1024M dcid=0 eth0=tuntap,HTAP,fe:fd:c0:a8:00:fd 
		
EN UML (node1)
			
		Comprobar configuracion de red 
			ifconfig 
			eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
					inet 192.168.1.101  netmask 255.255.255.0  broadcast 192.168.2.255
					ether fe:fd:c0:a8:00:fd  txqueuelen 1000  (Ethernet)
					RX packets 16843  bytes 18093552 (17.2 MiB)
					RX errors 0  dropped 30  overruns 0  frame 0
					TX packets 6538  bytes 807840 (788.9 KiB)
					TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
					device interrupt 5  

			lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
					inet 127.0.0.1  netmask 255.0.0.0
					loop  txqueuelen 1  (Local Loopback)
					RX packets 0  bytes 0 (0.0 B)
					RX errors 0  dropped 0  overruns 0  frame 0
					TX packets 0  bytes 0 (0.0 B)
					TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
		Probar conectividad NODE0-NODE1
			root@node1:/usr/src/dvs/dvk-proxies/test# ping -c 3 node0 
			PING node0 (192.168.1.100) 56(84) bytes of data.
			64 bytes from node0 (192.168.1.100): icmp_seq=1 ttl=64 time=0.409 ms
			64 bytes from node0 (192.168.1.100): icmp_seq=2 ttl=64 time=0.196 ms
			64 bytes from node0 (192.168.1.100): icmp_seq=3 ttl=64 time=0.196 ms

		ARRANCAR EL SCRIPT DEL DVS
		cd /usr/src/dvs/dvk-tests
		./test_uml.sh 1 0		
		
COMPROBAR EL ESTADO DE PROXIES Y NODOS 
			EN UML 
				root@node1:/usr/src/dvs/dvk-proxies/test# cat /proc/dvs/nodes   
				ID Flags Proxies -pxsent- -pxrcvd- 10987654321098765432109876543210 Name
				 0     E       0     2767     1181 -------------------------------X node0           
				 1     6      -1        0        0 -------------------------------X node1           
				root@node1:/usr/src/dvs/dvk-proxies/test# cat /proc/dvs/proxies/info
				Proxies Flags Sender Receiver --Proxies_Name- 10987654321098765432109876543210 
					  0     7    742      743           node0 -------------------------------X
			EN HOST 
				root@node0:/usr/src/dvs/dvk-proxies/test# cat /proc/dvs/nodes 
				ID Flags Proxies -pxsent- -pxrcvd- 10987654321098765432109876543210 Name
				 0     6      -1        0        0 -------------------------------X node0           
				 1     E       1     1577     1130 -------------------------------X node1           
				root@node0:/usr/src/dvs/dvk-proxies/test# cat /proc/dvs/proxies/info
				Proxies Flags Sender Receiver --Proxies_Name- 10987654321098765432109876543210 
				 	  1     7   4963     4964           node1 ------------------------------X-
					  
===================== REALIZAR PRUEBAS DE IPC Y COPIA DE BLOQUES DE DATOS ========================
HOST ES SERVER Y UML ES CLIENT
================================

TRANSFERENCIAS DE MENSAJES
--------------------------
	HOST: root@node0:/usr/src/dvs/dvk-proxies/test# nsenter -p -t $DC0 ./loop_r-s_server 1 10
	UML:  root@node1:/usr/src/dvs/dvk-proxies/test# ./loop_sr_client 1 10

TRANSFERENCIAS DE BLOQUES DE DATOS 		
----------------------------------
	HOST: root@node0:/usr/src/dvs/dvk-proxies/test# nsenter -p -t $DC0 ./loop_copy_server 1 10 65536
	UML:  root@node1:/usr/src/dvs/dvk-proxies/test# ./loop_copy_client 1

NO SE REALIZARON PRUEBAS EN SENTIDO INVERSO (HOST ES CLIENT, UML ES SERVER) PORQUE LOS PROGRAMAS DE PRUEBAS
ESTAN HARDCODED CON LOS VALORES DE HOST(nodeid=0) y UML(nodeid=1) 
	

===================== REALIZAR PRUEBAS TRANSFERENCIA DE ARCHIVOS  ========================

HOST(SERVER) UML(CLIENT)
------------------------
	HOST 
	cd /usr/src/dvs/dvk-tests/
	./test_rmtbind 0 21 1 m3ftp_client
	cd /usr/src/dvs/dvk-proxies/test/m3ftp/
	nsenter -p -t $DC0 ./m3ftpd 0 20
		RESULTADO
		t_start=1597065786.26 t_stop=1597065787.32 t_total=1.07
		total_bytes = 1024000
		Throuhput = 958636.216548 [bytes/s]
	
	UML
	cd /usr/src/dvs/dvk-tests/
	./test_rmtbind 0 20 0 m3ftp_server
	cd /usr/src/dvs/dvk-proxies/test/m3ftp/
	GET 
		./m3ftp -g 0 20 21 server.txt client.txt
	PUT 
		./m3ftp -p 0 20 21 server2.txt client.txt
	
	
		
HOST(CLIENT) UML(SERVER)
------------------------

	UML 
		./m3ftpd 0 21
		RESULTADO 
			t_start=1597065811.79 t_stop=1597065821.18 t_total=9.39
			total_bytes = 7340032
			Throuhput = 781798.949413 [bytes/s]
	HOST 
	GET
		nsenter -p -t $DC0 ./m3ftp -g 0 21 20 server.txt client2.txt
	PUT	 
		nsenter -p -t $DC0 ./m3ftp -p 0 21 20 server3.txt client2.txt


COMPARATIVO CON SSH

Sending file modes: C0755 69227508 vmlinux
vmlinux                 100%   66MB   6.0MB/s   00:10    
debug1: client_input_channel_req: channel 0 rtype exit-status reply 0
debug1: client_input_channel_req: channel 0 rtype eow@openssh.com reply 0
debug1: channel 0: free: client-session, nchannels 1
debug1: fd 0 clearing O_NONBLOCK
Transferred: sent 14480, received 69312416 bytes, in 11.0 seconds
Bytes per second: sent 1313.7, received 6288443.9


Con Buffer de 64Kbytes
t_start=1597187333.69 t_stop=1597187436.31 t_total=102.62
total_bytes = 69227508
FTP_GET [vmlinux] Throuhput = 674578.360351 [bytes/s]

Con Buffer de 1024Kbytes
t_start=1597188308.03 t_stop=1597188349.19 t_total=41.15
total_bytes = 69227508
FTP_GET [vmlinux] Throuhput = 1682237.536407 [bytes/s]

















	
	
	
	