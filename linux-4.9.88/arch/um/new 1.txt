
gcloud container clusters create nucleus-backend \
          --num-nodes 1 \
          --network nucleus-vpc \
          --region us-east1

gcloud container clusters get-credentials nucleus-backend \
          --region us-east1

kubectl create deployment hello-server \
          --image=gcr.io/google-samples/hello-app:2.0

kubectl expose deployment hello-server \
          --type=LoadBalancer \
          --port 8080
		  
=========================================================================
gcloud compute instance-templates create nucleus-template \
         --metadata-from-file startup-script=startup.sh 
		 
gcloud compute target-pools create nucleus-pool		 

gcloud compute instance-groups managed create nucleus-group \
         --base-instance-name nucleus \
         --size 2 \
         --template nucleus-template \
         --target-pool nucleus-pool
		 
gcloud compute firewall-rules create www-firewall --allow tcp:80


gcloud compute backend-services create nucleus-backend2 \
      --protocol HTTP --http-health-checks http-basic-check --global
	  
gcloud compute backend-services add-backend nucleus-backend2 \
    --instance-group nucleus-group \
    --instance-group-zone us-east1-b \
    --global
	
gcloud compute url-maps create web-map \
    --default-service nucleus-backend2
	
gcloud compute forwarding-rules create http-content-rule \
        --global \
        --target-http-proxy http-lb-proxy \
        --ports 80
		
		
NAME                                           LOCATION    SCOPE  NETWORK      MANAGED  INSTANCES
nucleus-group                                  us-east1-b  zone   default      Yes      2		




====================================================================================
Okay, let me share you the workaround.
For Task 3:

cat << EOF > startup.sh
#! /bin/bash
apt-get update
apt-get install -y nginx
service nginx start
sed -i -- 's/nginx/Google Cloud Platform - '"\$HOSTNAME"'/' /var/www/html/index.nginx-debian.html
EOF

gcloud compute instance-templates create web-server-template \
--metadata-from-file startup-script=startup.sh \
--network nucleus-vpc \
--machine-type g1-small \
--region us-east1

gcloud compute instance-groups managed create web-server-group \
--base-instance-name web-server \
--size 2 \
--template web-server-template \
--region us-east1

gcloud compute firewall-rules create web-server-firewall \
--allow tcp:80 \
--network nucleus-vpc

gcloud compute http-health-checks create http-basic-check

gcloud compute instance-groups managed \
set-named-ports web-server-group \
--named-ports http:80 \
--region us-east1

gcloud compute backend-services create web-server-backend \
--protocol HTTP \
--http-health-checks http-basic-check \
--global

gcloud compute backend-services add-backend web-server-backend \
--instance-group web-server-group \
--instance-group-region us-east1 \
--global

gcloud compute url-maps create web-server-map \
--default-service web-server-backend

gcloud compute target-http-proxies create http-lb-proxy \
--url-map web-server-map

gcloud compute forwarding-rules create http-content-rule \
--global \
--target-http-proxy http-lb-proxy \
--ports 80

gcloud compute forwarding-rules list

===============================================================
For the Task 1:

gcloud compute instances create nucleus-jumphost \
--network nucleus-vpc \
--zone us-east1-b \
--machine-type f1-micro \
--image-family debian-9 \
--image-project debian-cloud \
--scopes cloud-platform \
--no-address

For Task 2:

gcloud container clusters create nucleus-backend \
--num-nodes 1 \
--network nucleus-vpc \
--region us-east1

gcloud container clusters get-credentials nucleus-backend \
--region us-east1

kubectl create deployment hello-server \
--image=gcr.io/google-samples/hello-app:2.0

kubectl expose deployment hello-server \
--type=LoadBalancer \
--port 8080
For Task 3:

cat << EOF > startup.sh
#! /bin/bash
apt-get update
apt-get install -y nginx
service nginx start
sed -i -- 's/nginx/Google Cloud Platform - '"\$HOSTNAME"'/' /var/www/html/index.nginx-debian.html
EOF

gcloud compute instance-templates create web-server-template \
--metadata-from-file startup-script=startup.sh \
--network nucleus-vpc \
--machine-type g1-small \
--region us-east1

gcloud compute instance-groups managed create web-server-group \
--base-instance-name web-server \
--size 2 \
--template web-server-template \
--region us-east1

gcloud compute firewall-rules create web-server-firewall \
--allow tcp:80 \
--network nucleus-vpc

gcloud compute http-health-checks create http-basic-check

gcloud compute instance-groups managed \
set-named-ports web-server-group \
--named-ports http:80 \
--region us-east1

gcloud compute backend-services create web-server-backend \
--protocol HTTP \
--http-health-checks http-basic-check \
--global

gcloud compute backend-services add-backend web-server-backend \
--instance-group web-server-group \
--instance-group-region us-east1 \
--global

gcloud compute url-maps create web-server-map \
--default-service web-server-backend

gcloud compute target-http-proxies create http-lb-proxy \
--url-map web-server-map

gcloud compute forwarding-rules create http-content-rule \
--global \
--target-http-proxy http-lb-proxy \
--ports 80

gcloud compute forwarding-rules list


