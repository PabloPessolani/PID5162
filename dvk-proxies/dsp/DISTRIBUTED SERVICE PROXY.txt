DISTRIBUTED SERVICE PROXY
===================================================================================================
20220704:
	Se desarrolló el script dvs/dvk-tests/test_dsp.sh
	Este script se arranca automáticamente al iniciar Linux con el script
	/etc/init.d/dvs
	Luego se hizo 
	chmod 755 /etc/init.d/dvs 
	update-rc.d dvs defaults

	Actualmente esta solo para NODE0.

root@node0:/dev/shm# netstat -nat
Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State      
tcp        0      0 192.168.0.100:3001      0.0.0.0:*               LISTEN  
tcp        0      1 192.168.0.100:56740     192.168.0.101:3000      SYN_SENT   
root@node0:/dev/shm# ps -ef | grep dsp
root       613     1  0 14:42 ?        00:00:00 /usr/src/dvs/dvk-proxies/dsp/dsp_proxy /dev/shm/dsp_proxy.cfg


Generalizar el test_dsp.h 

root@node0:~# netstat -nat
Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State      
tcp        0      0 192.168.0.100:3001      0.0.0.0:*               LISTEN     
tcp        0      0 192.168.0.100:3002      0.0.0.0:*               LISTEN   
tcp        0      1 192.168.0.100:41822     192.168.0.102:3000      SYN_SENT   
tcp        0      1 192.168.0.100:57502     192.168.0.101:3000      SYN_SENT   

===================================================================================================
20220705:
		ESTA FALLANDO LA CONEXION
		
root@node0:~# netstat -nat
Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State      
tcp        0      0 192.168.0.100:3001      0.0.0.0:*               LISTEN     
tcp        0      0 192.168.0.100:3001      192.168.0.101:34222     ESTABLISHED
tcp        1      0 192.168.0.100:33682     192.168.0.101:3000      CLOSE_WAIT <<<<< ?????????


root@node1:~# netstat -nat
Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State          
tcp        0      0 192.168.0.101:3000      0.0.0.0:*               LISTEN     
tcp        0      0 192.168.0.101:34222     192.168.0.100:3001      ESTABLISHED
  

NODE0 - PROXY RECEIVER 
 dsp_proxy.c:pr_thread:648:MTX_UNLOCK px_ptr->px_rdesc.td_mtx 
 dsp_proxy.c:pr_thread:689:RPROXY(1): px_rdesc.td_header=B6301000
 dsp_proxy.c:pr_thread:696:RPROXY(1): px_rdesc.td_payload=B6302000
 dsp_proxy.c:pr_thread:703:RPROXY(1): px_rdesc.td_pseudo=B6313000
 dsp_proxy.c:pr_thread:712:RPROXY(1): px_rdesc.td_batch=0
 dsp_proxy.c:pr_thread:716:RPROXY(1): px_ptr->px_rdesc.td_header=0xb6301000 px_ptr->px_rdesc.td_payload=0xb6302000 diff=4096
 dsp_proxy.c:pr_setup_connection:190:RPROXY(1): for node node1 running at port=3001
 dsp_proxy.c:pr_setup_connection:214:RPROXY(1): 192.168.0.100 
 dsp_proxy.c:pr_setup_connection:218:RPROXY(1): px_rname=node0 listening on IP address=192.168.0.100
 dsp_proxy.c:pr_setup_connection:226:RPROXY(1): is bound to port=3001 socket=4
 dsp_proxy.c:pr_thread:739:RPROXY(1): Waiting for connection.
 
 dsp_proxy.c:ps_thread:1365:MTX_LOCK px_ptr->px_conn_mtx 
 dsp_proxy.c:ps_thread:1369:COND_SIGNAL px_ptr->px_conn_rcond <<<<<<<<<< DESBLOQUEA A RECEIVER NO BLOQUEADO 
 dsp_proxy.c:ps_thread:1370:COND_WAIT px_ptr->px_conn_scond px_ptr->px_conn_mtx
 
 dsp_proxy.c:pr_thread:746:RPROXY(1): Remote sender [192.168.0.101] connected on sd [5]. Getting remote command.
 dsp_proxy.c:pr_thread:748:MTX_LOCK px_ptr->px_conn_mtx 
 dsp_proxy.c:pr_thread:752:COND_SIGNAL px_ptr->px_conn_scond
 dsp_proxy.c:pr_thread:753:COND_WAIT px_ptr->px_conn_rcond px_ptr->px_conn_mtx <<<<< RECEIVER BLOQUEADO 
 
 
 
NODE1 - PROXY 
RECEIVER
 dsp_proxy.c:pr_thread:746:RPROXY(0): Remote sender [192.168.0.100] connected on sd [5]. Getting remote command.
 dsp_proxy.c:pr_thread:748:MTX_LOCK px_ptr->px_conn_mtx 
 dsp_proxy.c:pr_thread:752:COND_SIGNAL px_ptr->px_conn_scond <<<<<<<<<<<< DESBLOQUEA A SENDER QUE NO ESTA BLOQUEADO
 dsp_proxy.c:pr_thread:753:COND_WAIT px_ptr->px_conn_rcond px_ptr->px_conn_mtx <<<<<<<  SE BLOQUEA EN CONDICION
 
SENDER 
 dsp_proxy.c:ps_connect_to_remote:1193:SPROXY(0): for node node0 running at port=3001
 dsp_proxy.c:ps_connect_to_remote:1203:SPROXY(0): remote host address 0: 192.168.0.100
 dsp_proxy.c:ps_connect_to_remote:1212:SPROXY(0): for node node0 running at  IP=192.168.0.100
 dsp_proxy.c:ps_thread:1365:MTX_LOCK px_ptr->px_conn_mtx 
 dsp_proxy.c:ps_thread:1369:COND_SIGNAL px_ptr->px_conn_rcond <<<<<<<<<<<<<<<<<<<<<<<<DESBLOQUEA A RECEIVER 
 dsp_proxy.c:ps_thread:1370:COND_WAIT px_ptr->px_conn_scond px_ptr->px_conn_mtx <<<<< SENDER BLOQUEADO 
 
RECEIVER SIGUE 
 dsp_proxy.c:pr_thread:754:MTX_UNLOCK px_ptr->px_conn_mtx 
 
SOLUCION PARA SINCRONIZACION!!  
	SENDER 
			MTX_LOCK(px_ptr->px_conn_mtx);
			// EJECUTAR UN JOIN DE APLICACION !!!!!! 
			rcode = dvk_proxy_conn(px_ptr->px_proxyid, CONNECT_SPROXY);
			SET_BIT(px_ptr->px_status, PX_BIT_SCONNECTED);
			if( !TEST_BIT(px_ptr->px_status, PX_BIT_RCONNECTED)){
				COND_SIGNAL(px_ptr->px_conn_rcond);
				COND_WAIT(px_ptr->px_conn_scond, px_ptr->px_conn_mtx);
			}
			MTX_UNLOCK(px_ptr->px_conn_mtx);
			
	RECEIVER 
			MTX_LOCK(px_ptr->px_conn_mtx);
			// EJECUTAR UN JOIN SI ES LA PRIMERA VEZ QUE SE CONECTA - ESTO SE SABE CON EL NRO DE SECUENCIA !!!!!! 
			rcode = dvk_proxy_conn(px_ptr->px_proxyid, CONNECT_RPROXY);
			SET_BIT(px_ptr->px_status, PX_BIT_RCONNECTED);
			if( !TEST_BIT(px_ptr->px_status, PX_BIT_SCONNECTED)){
				COND_SIGNAL(px_ptr->px_conn_scond);
				COND_WAIT(px_ptr->px_conn_rcond, px_ptr->px_conn_mtx);
			}
			MTX_UNLOCK(px_ptr->px_conn_mtx);

LISTO- CONECTADOS !!!!!
root@node1:/usr/src/dvs/dvk-proxies# netstat -nat
Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State      
tcp        0      0 192.168.0.101:3000      0.0.0.0:*               LISTEN     
tcp        0      0 192.168.0.101:3000      192.168.0.100:35652     ESTABLISHED
tcp        0      0 192.168.0.101:49902     192.168.0.100:3001      ESTABLISHED

root@node0:/usr/src/dvs/dvk-proxies# netstat -nat
Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State      
tcp        0      0 192.168.0.100:3001      0.0.0.0:*               LISTEN     
tcp        0      0 192.168.0.100:35652     192.168.0.101:3000      ESTABLISHED
tcp        0      0 192.168.0.100:3001      192.168.0.101:49902     ESTABLISHED

===================================================================================================

# this is a comment 

# THIS IS THE VIRTUAL LOAD BALANCER - ALL CLIENT NODES BIND REMOTE ENDPOINTS TO THIS NODE
# Therefore, any REAL node must use the same NODEID than the LB VIRTUAL NODE.
lb node0 {
	nodeid 		0;
	lowwater	30;
	highwater	70;
	period		30;
	start 		60;
	stop  		60;
	min_servers	1;
	max_servers	2;	
	cltname		client0;
	svrname     node0;	
	cltdev		eth1;
	svrdev   	eth0;
	ssh_host	192.168.0.196;
	ssh_user	Admin;
	ssh_pass	mendieta;	
	vm_start 	"start_vm.bat";
	vm_stop   	"stop_vm.bat";
	vm_status  	"list_vm.bat";
};

################################################################################
# HERE are definded the SERVER NODES - the only client they have is the LB NODE.
################################################################################
server node1 {
	proxyid		1;
	proto		tcp; 
	rport		3001;
	sport		3000; 
	compress	NO; 
	batch		NO;
	autobind	NO;
	rname		node1;
	node_image  "E:\\NODE1\\node1.vmx";
};

server node2 {
	proxyid		1;
	proto		tcp; 
	rport		3002;
	sport		3000; 
	compress	NO; 
	batch		NO;
	autobind	NO;
	rname		node2;
	node_image  "E:\\NODE2\\node2.vmx";
};

################################################################################
# HERE are defined the CLIENT NODES - the only server they have is the LB NODE.
################################################################################
client client11 {
	nodeid 		11;
	proto		tcp; 
	rport		3011;
	sport		3000; 
	compress	NO; 
	batch		NO;
	autobind	NO;
	rname		node11;	
};

client client12 {
	nodeid 		12;
	proto		tcp; 
	rport		3012;
	sport		3000; 
	compress	NO; 
	batch		NO;
	autobind	NO;
	rname		node12;	
};

client client13 {
	nodeid 		12;
	proto		tcp; 
	rport		3013;
	sport		3000; 
	compress	NO; 
	batch		NO;
	autobind	NO;
	rname		node13;	
};

################################################################################
# HERE are definded the SERVICES 
# dcid: could be 0-(NR_DCS-1)
# 	if dcid is not defined, ANY will be the default
# ext_ep: is the endpoint known by the clients
# min_ep to max_ep: is the endpoint range where a service could be started
# bind: type coud be:
#     - replica: when the service is started at server it will be bound as REPLICA
#     - external:  the service has been bound externally to the DSP.
# prog: is the path of the script that will be invoked to start a service 
#	if prog is not specified, the service should be started externally to the DSP
################################################################################  
# service started automatically 
service latency {
	dcid	0;
	ext_ep	10;
	min_ep	10;
	max_ep	19;	
	bind	replica;
	prog	"/usr/src/dvs/dvs-apps/dvs_lb/run_latency.sh" 
};

# service started by hand !!
service m3ftp {
	dcid	0;
	ext_ep	20;
	min_ep	20;
	max_ep	29;	
	bind	external;
};

===================================================================================================
20220706:

LISTO: UNIFICAR en una estructura de datos proxy los datos comunes entre servers y clients 

LISTO: Funciona bien la lectura y control de los parametros de configuracion del .cfg 

===================================================================================================
20220707:

root@node1:/usr/src/dvs/dvk-proxies/dsp# netstat -nat
Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State      
tcp        0      0 0.0.0.0:3002            0.0.0.0:*               LISTEN     
tcp        0      0 0.0.0.0:3011            0.0.0.0:*               LISTEN     
tcp        0      0 0.0.0.0:3012            0.0.0.0:*               LISTEN     
tcp        0      0 0.0.0.0:3013            0.0.0.0:*               LISTEN     
tcp        0      1 192.168.0.101:52466     192.168.0.112:3000      SYN_SENT   
tcp        0      1 192.168.0.101:32956     192.168.0.102:3000      SYN_SENT   
tcp        0      1 192.168.0.101:45358     192.168.0.111:3000      SYN_SENT   
tcp        0      1 192.168.0.101:55542     192.168.0.113:3000      SYN_SENT   

root       642   642   636  0 14:55 pts/0    00:00:00 ./dsp_proxy dsp_node1.cfg
root       642   643   636  0 14:55 pts/0    00:00:00 ./dsp_proxy dsp_node1.cfg
root       642   644   636  0 14:55 pts/0    00:00:00 ./dsp_proxy dsp_node1.cfg
root       642   645   636  0 14:55 pts/0    00:00:00 ./dsp_proxy dsp_node1.cfg
root       642   646   636  0 14:55 pts/0    00:00:00 ./dsp_proxy dsp_node1.cfg
root       642   647   636  0 14:55 pts/0    00:00:00 ./dsp_proxy dsp_node1.cfg
root       642   648   636  0 14:55 pts/0    00:00:00 ./dsp_proxy dsp_node1.cfg
root       642   649   636  0 14:55 pts/0    00:00:00 ./dsp_proxy dsp_node1.cfg
root       642   650   636  0 14:55 pts/0    00:00:00 ./dsp_proxy dsp_node1.cfg

DISEÑO
	Un thread para ps_get2rmt que hace el get2rmt y utiliza los FD de los sockets abiertos por cada uno de los threads
	que solo conectan contra el remoto .
	O sea, 

El mutex px_ptr->px_conn_mtx correspondiente al local node, protege a si mismo y tambien 
a las estructuras del lb, tal como los bitmaps lb_bm_sconn y lb_bm_rconn



TODO: SOLO INICIALIZAR LOS PROXIES DISTINTOS AL LOCAL NODEID
	Dado que todos los endpoints remotos tanto de SERVERS como de CLIENTS van a estar apuntados 
	al VIRTUAL LB, sucede lo siguiente:
		- PROXY SENDER: Solo habrá un dvk_get2rmt() pero un thread de TCP por cada nodo remoto 
			IF( nodeid == local_ndodeid)
				thread que hace el get2rmt (ES BLOQUEANTE EN get2rmt) 
			ELS
				thread SENDER que conecta con el nodo nodeid 
			Entre el thread get2rmt y los threads de TCP se sincronizan via MUTEX/COND 
				
		- PROXY RECEIVER:  De forma similar se puede usar un thread para hacer el dvk_put2lcl 
			IF( nodeid == local_ndodeid)
				thread que hace el put2lcl (NO ES BLOQUEANTE) se bloquea en una COND  
			ELS
				thread RECEIVER que conecta con el nodo nodeid (SE BLOQUEA EN TCP) 
			Entre el thread put2lcl y los threads de TCP se sincronizan via MUTEX/COND
			

===================================================================================================
20220713:


root@node1:/usr/src/dvs/dvk-proxies/dsp# netstat -ant
Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State      
tcp        0      0 0.0.0.0:3002            0.0.0.0:*               LISTEN     
tcp        0      0 0.0.0.0:3011            0.0.0.0:*               LISTEN     
tcp        0      0 0.0.0.0:3012            0.0.0.0:*               LISTEN     
tcp        0      0 0.0.0.0:3013            0.0.0.0:*               LISTEN     
tcp        0      1 192.168.0.101:59274     192.168.0.112:3000      SYN_SENT    <<<<< MAL 3000, SI SOY NODE1 VA AL 3001 
tcp        0      1 192.168.0.101:50376     192.168.0.113:3000      SYN_SENT   
tcp        0      1 192.168.0.101:38938     192.168.0.102:3000      SYN_SENT   
tcp        0      1 192.168.0.101:35972     192.168.0.111:3000      SYN_SENT   

CUANDO SE CONECTO NODE2 CON NODE1 

tcp        0      0 192.168.0.102:52570     192.168.0.101:3002      FIN_WAIT2  
tcp        1      0 192.168.0.102:3001      192.168.0.101:51450     CLOSE_WAIT 

tcp        1      0 192.168.0.101:3002      192.168.0.102:52570     CLOSE_WAIT 
tcp        0      0 192.168.0.101:51450     192.168.0.102:3001      FIN_WAIT2  

root@node1:/usr/src/dvs/dvk-proxies/dsp# cat /proc/dvs/nodes 
ID Flags Proxies -pxsent- -pxrcvd- 10987654321098765432109876543210 Name
 0     E       0        0        0 -------------------------------- node0           
 1     6      -1        0        0 -------------------------------X node1           
 2     A       2        0        0 -------------------------------- node2           
11     2      11        0        0 -------------------------------- node11          
12     2      12        0        0 -------------------------------- node12          
13     2      13        0        0 -------------------------------- node13  

root@node1:/usr/src/dvs/dvk-proxies/dsp# cat /proc/dvs/proxies/info 
Proxies Flags Sender Receiver --Proxies_Name- 10987654321098765432109876543210 
      0     7    607      606           node0 -------------------------------X
      2     5    609      608           node2 -----------------------------X--
     11     1    611      610          node11 --------------------X-----------
     12     1    613      612          node12 -------------------X------------
     13     1    615      614          node13 ------------------X-------------

===================================================================================================
20220714:

SESIONES OK!
	NODE2
	root@node2:/usr/src/dvs/dvk-proxies/dsp# netstat -nat | grep ":300"
	tcp        0      0 0.0.0.0:3001            0.0.0.0:*               LISTEN     
	tcp        0      0 192.168.0.102:3001      192.168.0.101:36986     ESTABLISHED
	tcp        0      0 192.168.0.102:54088     192.168.0.101:3002      ESTABLISHED

	NODE1
	root@node1:/usr/src/dvs/dvk-proxies/dsp# netstat -nat | grep ":300"
	tcp        0      0 0.0.0.0:3002            0.0.0.0:*               LISTEN     
	tcp        0      0 192.168.0.101:3002      192.168.0.102:54088     ESTABLISHED
	tcp        0      0 192.168.0.101:36986     192.168.0.102:3001      ESTABLISHED

	YA INTERCAMBIAN HELLO BIEN ENTRE 2 NODOS 
				
===================================================================================================
TODO:
	PROBAR COMUNICACIONES ENTRE 2 NODOS 
		LATENCIA OK!
		FILE TRANSFER OK! 
		
	TODO:	HABILITAR DEBUG EN TODOS
		dvk 
		lib
		proxies
		test 
		apps 
		
		
===================================================================================================
ULTIMO_LOG 
TODO, se podrian utilizar listas enlazadas de los nodos activos en lugar de bitmaps para 
no tener que recorrer la lista completa.

TODO:  ORGANIZAR LOS ARCHIVOS FUENTES
		dsp_main 
		dsp_rproxy
		dsp_sproxy 
		dsp_config
		dsp_group 
		dsp_misc 
		
		
TODO: Eliminar parametros innecesarios
	cltdev		eth1;
	svrdev   	eth0;
		
TODO: Documentar cada uno de los parametros

