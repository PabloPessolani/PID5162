En protocolo TCP/IP se utiliza DNS para localizar al servidor y ARP para localizar la IP dentro de una LAN.
El problema que padece es cuando el server primario se cae y el backup (con otra IP) debe sustituirlo
Esto se soluciona con protocolos tales como HSRP y VRRP que utilizan interfaces de LAN fantasmas 
que son las que efectivamente son referidas por los programas clientes.
Los servers, primario/backup adquieren esa direccion IP/MAC fantasma que es la unica vista por los clientes.
Para cuando se utiliza RSM, es el DNS (por ejemplo, round robin DNS) el que informa al cliente de la IP
de un server.

RADAR es un algoritmo distribuido que detecta cambios en la localizacion de endpoints en esquemas 
de replicación PRIMARY/BACKUP (PB) y Replicated State Machine (RSM)

Si se ejecuta MOL, entonces en cada nodo del DC existirá una SYSTASK que llevará cuenta
de la localización de los diferentes servidores y, como cada nodo es dueño de un grupo de 
SLOTS tambien sabe en que nodo esta un endpoint de tipo CLIENT ( ep_client > NR_SYSPROCS)
porque todo proceso se crea a traves del PM que se lo informa a la SYSTASK 

Cuando no se ejecuta MOL, entonces los servidores corren en diferentes nodos del cluster.
El problema es que los clientes no saben su localización y los servers no saben la localizacion 
de los clients. Esto ultimo se resuelve con el AUTOBIND del proxy TCP/TIPC.
Cuando un cliente hace un BIND a en un nodo e intenta enviar un mensaje al server en otro nodos, 
el proxy receiver del nodo del server verifica si el cliente ya esta bindeado. Si no esta bindeado, 
entonces hace el AUTOBIND. Si estaba bindeado en otro nodo le da el tratamiento de una migracion.
Desde ese momento el nodo del server sabe cual es el nodo del client.

Supongamos que se dispone de DC0 compuesto por NODO0,NODO1,NODO2
En NODE0 y NODE1 se ejecuta RDISK 

Por ejemplo RDISK  crea el grupo "RDISK<dcid>", en este caso seria RDISK00 porque se toman 2 digitos para el DCID.
	sprintf( rdisk_group, "RDISK%02d", dc_ptr->dc_dcid);

El nombre del miembro RDISK seria "RDISK<dcid>.<nodeid>"
En los nodos donde se ejecutarán clientes y donde no se ejecuta RDISK, elnombre del miembro 
RADAR sera "RADAR<dcid>.<nodeid>"
	
Supongamos que el RDISK primario está en el NODE0 y su backup en NODE1.
Los DVK de los nodos NODO0,NODO1 estarán al tanto de su localizacion, en tanto que el DVK de NODO2 no sabrá nada al respecto.
Supongamos que hay procesos clientes de RDISK en NODE2.
Si a RADAR se le indica que escuche en el grupo "RDISK00" y que esté atento a la localizacion del endpoint de RDISK
Entonces cuando RADAR se conecta, escucha que pasa en el grupo RDISK pero no participa del algoritmo RDISK.

Al iniciar, RADAR leera de un archivo de configuración en NODE2 sobre los servicios a controlar.

// Monitorear servicio de grupo RDISK00, del DCID=0 endpoint 3 de tipo PRIMARY/BACKUP 
// que tiene habilitados los nodos 0,1,4,7,9
RDISK0 {
	replica		PB;
	dc_id  		0;
	endpoint 	3;
	group		"RDISK";
	nodes 		0,1,4,7,9;
}

// Monitorear servicio de grupo RDISK01, del DCID=1 endpoint 3 de tipo Replicated State Machine 
// que tiene habilitados los nodos 0,1,4,5,8
RDISK1 {
	replica		RSM;
	dc_id  		1;
	endpoint 	3;
	group		"RDISK"
	nodes 		0,1,4,5,8;
}

Si no se especifica "type", se asume PRIMARY/BACKUP 
Si no se especifican "nodes", entonces se asuma ANY (cualquier nodo)

Deberan chequearse incompatibilidades tales como el mismo nombre de grupo 
para el mismo endpoint en el mismo DCID.
O que el mismo endpoint se chequee en el mismo DCID.
O que el mismo nombre se use para dos endpoints diferentes del mismo DCID.

dc_id	endpoint	group  
0		3			RDISK
1		3			RDISK <<< CORRECTO: Controla 2 servicios RDISK, uno en DCID=0 y otro en DCID=1

dc_id	endpoint	group   
0		3			RDISK
0		3			PIRULO  <<< INCORRECTO: Mismo {dcid, endpoint}

dc_id	endpoint	group   
0		3			RDISK
0		5			RDISK  <<< INCORRECTO: Mismo nombre de grupo para el mismo DCID

Se modifico RDISK de tal forma que se pueda ignorar aquellos mensajes que provienen de miembros
diferentes a "RDISK" (como por ejemplo RADAR)- 

Por cada servicio a controlar obtenido del archivo de configuracion RADAR realiza:
  - verifica que el endpoint a controlar no esté ejecutando en el nodo local.
  - verifica si el endpoint esta bindeado: 
		si no lo esta, inicializa las variables
		si esta bindeado, actualizar similar a que se hubiese caido. 
  - crea un hilo para atenderlo mediante spread 
  
Cada Hilo de cada servicio a monitorear 
	- se conecta al grupo spread {nombre_servicio, dcid}
	- como usuario {nombre_servicio, dcid, local_nodeid}
	- Realiza el JOIN al grupo.
	- Entra en el loop de radar 
	
El loop de radar 
	- recibe el mensaje spread 
	- si recibe un mensaje de tipo MC_RADAR_INFO ejecuta get_radar_info()
	- si hay un JOIN, solo a modo de verificacion guarda la cantidad y bitmap de nodos RADAR 
	- si hay un DISCONNECT verifica si el que murio fue el primario actual. si fue asi:
		- guarda al primario actual como primario anterior
		- setea el primario actual como NO_PRIMARY_DEAD
		- notifica al DVK que el endpoint va a migrar 
	- si hay una PARTICION/MERGE de RED verifica si:
		Cualquiera sea la razon PARTICION/MERGE
			- guarda al primario actual como primario anterior
			- setea el primario actual como NO_PRIMARY_NET
			- notifica al DVK que el endpoint va a migrar	
	
CONDICION QUE DEBE CUMPLIR EL SERVER A CONTROLAR:
	Cada vez que hay un cambio de topologia (JOIN/DISCONNECT/PARTITION/MERGE)
	el primario resultante debe enviar un MULTICAST tipo MC_RADAR_INFO 
			
La funcion get_radar_info() hace:	
	- se supone que el usuario emisor es el primario
	- verifica que el nodo pertenezca al DVS y a los nodos habilitados para el servicio 
	- verifica que este conectado al nodo local 
	- verifica que ese nodo pueda pertenecer al DCID 
	- verifica el endpoint del emisor contra el endpoint a controlar
	- si el estado del primary_mbr=NO_PRIMARY_BIND, es decir no esta bindeado localmente
			- hace el bind del nodo primario como nodo remoto
	- si el estado del primary_mbr=NO_PRIMARY_DEAD es decir murio el primario anterior
			- hace el commit de la migracion si ahora el primario es un nodo diferente 
			- hace el rollback de la migracion si el primario es el mismo que antes
	- si el estado del primary_mbr=NO_PRIMARY_NET es decir partio la red y el nodo local quedo sin primario 
			- hace el commit de la migracion si ahora el primario es un nodo diferente 
			- hace el rollback de la migracion si el primario es el mismo que antes			
	- si el estado es normal, entonces actualiza el resto de la variables de estado.
	
En modalidad RSM:

1) Cuando se conecta RADAR y no hay ningún server, debe esperar el MC_RADAR_INFO
Y el  primer server será el utilizado por el nodo RADAR. Debe verificar que el primer nodo del grupo se válido.

2) Si por el contrario, los multiples servers están ya conectados, el primero en la lista debe hacer MC_RADAR_INFO.
ahora en el MC_RADAR_INFO RADAR puede decidir por otros criterios, cuales nodos podrá utilizar
Cuando sucede un cambio de topología (JOIN, DISCONNECT, SPLIT, MERGE), 
y se recibe el MC_RADAR_INFO, en el caso de RSM se puede hacer lo siguiente:
- Si el nodo que el endpoint del server tenia asignado en el nodo RADAR sigue vivo, no cambia nada
- Si el nodo que el endpoint del server tenia asignado en el nodo RADAR murió, 
entonces entre los (nodos vivos AND nodos válidos) puede hacer un sorteo.

 Aunque en RSM no exista el concepto de primario, en RADAR si existe porque será el nodo donde estará el servicio.	

 Cualquier servicio que deba ser monitoreado deber informar de cambios de topologia a RADAR 
 
 	msg.m_source= local_nodeid;		/* ESENCIAL: this is the primary, for PB replication type  */
	msg.m_type 	= MC_RADAR_INFO;
	
	msg.m2_i1	= nr_nodes;			// AUXILIAR: # of connected nodes 
	msg.m2_i2	= nr_sync;			// ESENCIAL: # of syncronized/active nodes (they are valid replicas)
	msg.m2_i3	= rd_ep;			// ESENCIAL: RADAR controlled service endpoint
	
	msg.m2_l1	= bm_nodes;			// AUXILIAR: bitmap of connected nodes
	msg.m2_l2	= bm_sync;			// ESENCIAL: bitmap of syncronized/active nodes
	
  
 PRUEBA DE RADAR
 ===============
 
 Se utilizaran 3 nodos 
 
 NODO0 como Primary de RDISK
 NODO1 como Backup de RDISK
 NODO2 como Cliente de RADAR 
 
 Se utilizar DC0 para RDISK
 
Arrancar en NODE0 RDISK el script 
	root@node0:/usr/src/dvs/scripts# ./rdisk.sh 0 0
	root@node0:/usr/src/dvs/scripts# . /usr/src/dvs/dvs-apps/dc_init/DC0.sh 
	root@node0:/usr/src/dvs/scripts# cd /usr/src/dvs/vos/mol/drivers/rdisk
	root@node0:/usr/src/dvs/vos/mol/drivers/rdisk# nsenter -p -u -F -t$DC0 ./rdisk.sh 0 

Arrancar en NODE1 RDISK el script 
	root@node1:/usr/src/dvs/scripts# ./rdisk.sh 1 0
	root@node1:/usr/src/dvs/scripts# . /usr/src/dvs/dvs-apps/dc_init/DC0.sh 
	root@node1:/usr/src/dvs/scripts# cd /usr/src/dvs/vos/mol/drivers/rdisk
	root@node1:/usr/src/dvs/vos/mol/drivers/rdisk# nsenter -p -u -F -t$DC0 ./rdisk.sh 0	

Arrancar en NODE2 RADAR 
	root@node2:/usr/src/dvs/scripts# ./rdisk.sh 2 0
	root@node2:/usr/src/dvs/scripts# cd ../dvs-apps/radar/
	root@node2:/usr/src/dvs/dvs-apps/radar/# ./radar radar.cfg


PRUEBA 1
========
	- Arrancar RDISK en NODE0 
	- Arrancar RADAR en NODE2 
	- Verificar en NODE2 que el endpoint se haya bindeado 
		root@node2:/usr/src/dvs/dvs-apps/radar# cat /proc/dvs/DC0/procs 
		DC pnr -endp -lpid/vpid- nd flag misc -getf -sndt -wmig -prxy name
		 0   3     3    -1/-1     0 1000    0 27342 27342 27342 27342 RDISK  <<<<< ESTADO 1000	
	- Desconectar la placa de red de NODE0
	- Verificar en NODE2 que el endpoint haya cambiado de estado 
		root@node2:/usr/src/dvs/dvs-apps/radar# cat /proc/dvs/DC0/procs 
		DC pnr -endp -lpid/vpid- nd flag misc -getf -sndt -wmig -prxy name
		 0   3     3    -1/-1     0 1800    0 27342 27342 27342 27342 RDISK  <<<<< ESTADO 1800	(REMOTO Y MIGRANDO)
	- Ver el resultado en RADAR
		 radar.c:no_primary_net:562:RDISK ARTER: rad_primary_mbr=-3 (NO_PRIMARY_NET) rad_primary_old=0 <<<<<< VIEJO PRIMARIO  
		 radar.c:radar_loop:430:RDISK: new bm_init=1 bm_nodes=0 primary_mbr=-3 nr_radar=2 bm_radar=2 <<<<<< NO_PRIMARY_NET
	- Conectar la placa de red de NODE0
	- Verificar en NODE2 que el endpoint haya cambiado de estado	
		root@node2:/usr/src/dvs/dvs-apps/radar# cat /proc/dvs/DC0/procs 
		DC pnr -endp -lpid/vpid- nd flag misc -getf -sndt -wmig -prxy name
		 0   3     3    -1/-1     0 1000    0 27342 27342 27342 27342 RDISK   <<<<< OTRA VEZ 1000	 
	- Ver el resultado en RADAR
		radar.c:get_radar_info:519:RDISK: rad_primary_mbr=0 rad_primary_old=0 rad_nr_nodes=1 rad_nr_init=1 <<< ACTUAL PRIMARIO IGUAL ANTIGUO PRIMARIO 
		radar.c:get_radar_info:520:RDISK: rad_bm_nodes=1 rad_bm_init=1
		

EN NODE0:
	NODE0 PRIMARIO 
./rdisk -d 0 -e 3 -R -c /tmp/rdisk0.cfg
DC pnr -endp -lpid/vpid- nd flag misc -getf -sndt -wmig -prxy name
 0   3     3   669/4      0    8   20 31438 27342 27342 27342 rdisk  
 
EN NODE1:	
	NODE0 PRIMARIO 
./rdisk -d 0 -e 3 -R -c /tmp/rdisk0.cfg
DC pnr -endp -lpid/vpid- nd flag misc -getf -sndt -wmig -prxy name
 0   3     3   595/4      0 1000   30 27342 27342 27342 27342 rdisk
	NODE0 MUERE => NODE1 PRIMARIO 
root@node1:/usr/src/dvs/vos/mol/drivers/rdisk# cat /proc/dvs/DC0/procs 
DC pnr -endp -lpid/vpid- nd flag misc -getf -sndt -wmig -prxy name
 0   3     3   595/4      1    8   20 31438 27342 27342 27342 rdisk 
 
EN NODE2:
	NODE0 PRIMARIO 
DC pnr -endp -lpid/vpid- nd flag misc -getf -sndt -wmig -prxy name
 0   3     3    -1/-1     0 1000    0 27342 27342 27342 27342 RDISK0         
	NODE1 PRIMARIO 
root@node2:~# cat /proc/dvs/DC0/procs 
DC pnr -endp -lpid/vpid- nd flag misc -getf -sndt -wmig -prxy name
 0   3     3    -1/-1     1 1000    0 27342 27342 27342 27342 RDISK0  
 	NODE1 MUERE => EN PROCESO DE MIGRACION 
 root@node2:~# cat /proc/dvs/DC0/procs 
DC pnr -endp -lpid/vpid- nd flag misc -getf -sndt -wmig -prxy name
 0   3     3    -1/-1     1 1800    0 27342 27342 27342 27342 RDISK0   
	NODE0 LEVANTA => FIN DE MIGRACION DESDE NODE1->NODE0 
root@node2:~# cat /proc/dvs/DC0/procs 
DC pnr -endp -lpid/vpid- nd flag misc -getf -sndt -wmig -prxy name
 0   3     3    -1/-1     0 1000    0 27342 27342 27342 27342 RDISK0
    NODE0 MUERE => EN PROCESO DE MIGRACION
root@node2:~# cat /proc/dvs/DC0/procs 
DC pnr -endp -lpid/vpid- nd flag misc -getf -sndt -wmig -prxy name
 0   3     3    -1/-1     0 1800    0 27342 27342 27342 27342 RDISK0    
	NODE1 LEVANTA Y ES PRIMARIO 
root@node2:~# cat /proc/dvs/DC0/procs 
DC pnr -endp -lpid/vpid- nd flag misc -getf -sndt -wmig -prxy name
 0   3     3    -1/-1     1 1000    0 27342 27342 27342 27342 RDISK0
 
 
 
 =======================================================================
 NODE0: RDISK PRIMARIO
 NODE1: RDISK BACKUP
 NODE2: CLIENT (RADAR)
 
	NODE0 ES EL PRIMARIO  
		root@node0:/usr/src/dvs/vos/mol/drivers/rdisk# cat /proc/dvs/DC0/procs 
		DC pnr -endp -lpid/vpid- nd flag misc -getf -sndt -wmig -prxy name
		0   3     3   641/4      0    8   20 31438 27342 27342 27342 rdisk 
 
		root@node1:/usr/src/dvs/vos/mol/drivers/rdisk# cat /proc/dvs/DC0/procs 
		DC pnr -endp -lpid/vpid- nd flag misc -getf -sndt -wmig -prxy name
		0   3     3   633/4      0 1000   30 27342 27342 27342 27342 rdisk
 
		 root@node2:/usr/src/dvs/dvs-apps/radar# cat /proc/dvs/DC0/procs 
		DC pnr -endp -lpid/vpid- nd flag misc -getf -sndt -wmig -prxy name
		 0   3     3    -1/-1     0 1000    0 27342 27342 27342 27342 RDISK0  
		 
	PRUEBO CLIENTE DE RDISK en NODE2 
		root@node2:/usr/src/dvs/dvs-apps/radar# ./test_radar 
		Usage: ./test_radar <dcid> <svr_nr> <clt_nr> 
		root@node2:/usr/src/dvs/dvs-apps/radar# ./test_radar 0 3 70
		DEBUG 653:dvk_open:47: Open dvk device file /dev/dvk
		DEBUG 653:dvk_getprocinfo:584: dcid=0 p_nr=3 
		DEBUG 653:dvk_getprocinfo:589: ioctl ret=0 errno=0
		nr=3 endp=3 dcid=0 flags=1000 misc=0 lpid=-1 vpid=-1 nodeid=0 name=RDISK0 
		endp=3 dcid=0 flags=1000 p_getfrom=27342 p_sendto=27342 p_waitmigr=27342 p_waitunbind=27342 p_proxy=27342
		nr=3 endp=3 dcid=0 p_lclsent=0 p_rmtsent=0 p_lclcopy=0 p_rmtcopy=0 
		DEBUG 653:dvk_bind_X:607: cmd=0 dcid=0 pid=-1 endpoint=70 nodeid=-1
		DEBUG 653:dvk_bind_X:616: ioctl ret=70 errno=0
		CLIENT BIND dcid=0 clt_pid=653 clt_nr=70 clt_ep=70 m_ptr=0xebc008
		CLIENT pause before SENDREC
		CLIENT SENDREC msg 0:source=0 type=10 m1i1=1 m1i2=2 m1i3=3 m1p1=(nil) m1p2=(nil) m1p3=(nil) 
		DEBUG 653:dvk_sendrec_T:451: endpoint=3 timeout=5000
		DEBUG 653:dvk_sendrec_T:456: ioctl ret=0 errno=0
		CLIENT received  REPLY msg:source=3 type=68 m1i1=2 m1i2=0 m1i3=3 m1p1=(nil) m1p2=(nil) m1p3=(nil) 
		FUNCIONA OK!!!!
		
	EN NODE0 SE VE EL ENDPOINT DEL CLIENTE BINDEADO AUTOMATICAMENTE	
		root@node0:/usr/src/dvs/vos/mol/drivers/rdisk# cat /proc/dvs/DC0/procs 
		DC pnr -endp -lpid/vpid- nd flag misc -getf -sndt -wmig -prxy name
		 0   3     3   641/4      0    8   20 31438 27342 27342 27342 rdisk          
		 0  70    70    -1/-1     2 1000    0 27342 27342 27342 27342 rclient  
 
	NODE0 MUERE => NODE1 PRIMARIO 
		root@node1:/usr/src/dvs/vos/mol/drivers/rdisk# cat /proc/dvs/DC0/procs 
		DC pnr -endp -lpid/vpid- nd flag misc -getf -sndt -wmig -prxy name
		0   3     3   633/4      1    8   20 31438 27342 27342 27342 rdisk  
 
		EN NODE2 
		root@node2:/usr/src/dvs/dvs-apps/radar# cat /proc/dvs/DC0/procs 
		DC pnr -endp -lpid/vpid- nd flag misc -getf -sndt -wmig -prxy name
		 0   3     3    -1/-1     1 1000    0 27342 27342 27342 27342 RDISK0  
		 
	PRUEBO CLIENTE DE RDISK  
		root@node2:/usr/src/dvs/dvs-apps/radar# ./test_radar 0 3 70
		DEBUG 656:dvk_open:47: Open dvk device file /dev/dvk
		DEBUG 656:dvk_getprocinfo:584: dcid=0 p_nr=3 
		DEBUG 656:dvk_getprocinfo:589: ioctl ret=0 errno=0
		nr=3 endp=3 dcid=0 flags=1000 misc=0 lpid=-1 vpid=-1 nodeid=1 name=RDISK0 
		endp=3 dcid=0 flags=1000 p_getfrom=27342 p_sendto=27342 p_waitmigr=27342 p_waitunbind=27342 p_proxy=27342
		nr=3 endp=3 dcid=0 p_lclsent=0 p_rmtsent=0 p_lclcopy=0 p_rmtcopy=0 
		DEBUG 656:dvk_bind_X:607: cmd=0 dcid=0 pid=-1 endpoint=70 nodeid=-1
		DEBUG 656:dvk_bind_X:616: ioctl ret=70 errno=0
		CLIENT BIND dcid=0 clt_pid=656 clt_nr=70 clt_ep=70 m_ptr=0x12c2008
		CLIENT pause before SENDREC
		CLIENT SENDREC msg 0:source=0 type=10 m1i1=1 m1i2=2 m1i3=3 m1p1=(nil) m1p2=(nil) m1p3=(nil) 
		DEBUG 656:dvk_sendrec_T:451: endpoint=3 timeout=5000
		DEBUG 656:dvk_sendrec_T:456: ioctl ret=0 errno=0
		CLIENT received  REPLY msg:source=3 type=68 m1i1=2 m1i2=0 m1i3=3 m1p1=(nil) m1p2=(nil) m1p3=(nil) 
 
	EN NODE1 SE VE EL ENDPOINT DEL CLIENTE BINDEADO AUTOMATICAMENTE 
		 root@node1:/usr/src/dvs/vos/mol/drivers/rdisk# cat /proc/dvs/DC0/procs 
		DC pnr -endp -lpid/vpid- nd flag misc -getf -sndt -wmig -prxy name
		 0   3     3   633/4      1    8   20 31438 27342 27342 27342 rdisk          
		 0  70    70    -1/-1     2 1000    0 27342 27342 27342 27342 rclient 
 
 
 
 PRUEBA DE TRANSPARENCIA 
	NODE0   PRIMARIO
	NODE1	BACKUP 
 
		root@node2:/usr/src/dvs/dvs-apps/radar# cat /proc/dvs/DC0/procs 
		DC pnr -endp -lpid/vpid- nd flag misc -getf -sndt -wmig -prxy name
		 0   3     3    -1/-1     0 1000    0 27342 27342 27342 27342 RDISK0  <<<< NODE0 PRIMARIO
		 
		 SE HACEN 30 LOOPS DE SENDREC EN 1 SEGUNDO CADA UNO DONDO m1i1 CONTIENE EL NUMERO DE ITERACION   
		root@node2:/usr/src/dvs/dvs-apps/radar# ./test_radar 0 3 71
		DEBUG 734:dvk_open:47: Open dvk device file /dev/dvk
		DEBUG 734:dvk_getprocinfo:584: dcid=0 p_nr=3 
		DEBUG 734:dvk_getprocinfo:589: ioctl ret=0 errno=0
		nr=3 endp=3 dcid=0 flags=1000 misc=0 lpid=-1 vpid=-1 nodeid=0 name=RDISK0 
		endp=3 dcid=0 flags=1000 p_getfrom=27342 p_sendto=27342 p_waitmigr=27342 p_waitunbind=27342 p_proxy=27342
		nr=3 endp=3 dcid=0 p_lclsent=0 p_rmtsent=0 p_lclcopy=0 p_rmtcopy=0 
		DEBUG 734:dvk_bind_X:607: cmd=0 dcid=0 pid=-1 endpoint=71 nodeid=-1
		DEBUG 734:dvk_bind_X:616: ioctl ret=71 errno=0
		CLIENT BIND dcid=0 clt_pid=734 clt_nr=71 clt_ep=71 m_ptr=0x1cc5008
		CLIENT pause before SENDREC
		CLIENT SENDREC msg 0:source=0 type=10 m1i1=0 m1i2=2 m1i3=3 m1p1=(nil) m1p2=(nil) m1p3=(nil) 
		DEBUG 734:dvk_sendrec_T:451: endpoint=3 timeout=5000
		DEBUG 734:dvk_sendrec_T:456: ioctl ret=0 errno=0
		ERROR: test_radar.c:main:68: rcode=0
		CLIENT SENDREC msg 1:source=3 type=68 m1i1=1 m1i2=0 m1i3=3 m1p1=(nil) m1p2=(nil) m1p3=(nil) 
		DEBUG 734:dvk_sendrec_T:451: endpoint=3 timeout=5000
		DEBUG 734:dvk_sendrec_T:456: ioctl ret=0 errno=0
		ERROR: test_radar.c:main:68: rcode=0
		CLIENT SENDREC msg 2:source=3 type=68 m1i1=2 m1i2=0 m1i3=3 m1p1=(nil) m1p2=(nil) m1p3=(nil) 
		DEBUG 734:dvk_sendrec_T:451: endpoint=3 timeout=5000
		DEBUG 734:dvk_sendrec_T:456: ioctl ret=0 errno=0
		ERROR: test_radar.c:main:68: rcode=0
		CLIENT SENDREC msg 3:source=3 type=68 m1i1=3 m1i2=0 m1i3=3 m1p1=(nil) m1p2=(nil) m1p3=(nil) 
		DEBUG 734:dvk_sendrec_T:451: endpoint=3 timeout=5000
		DEBUG 734:dvk_sendrec_T:456: ioctl ret=0 errno=0
		ERROR: test_radar.c:main:68: rcode=0
		CLIENT SENDREC msg 4:source=3 type=68 m1i1=4 m1i2=0 m1i3=3 m1p1=(nil) m1p2=(nil) m1p3=(nil) 
		DEBUG 734:dvk_sendrec_T:451: endpoint=3 timeout=5000
		DEBUG 734:dvk_sendrec_T:456: ioctl ret=0 errno=0
		ERROR: test_radar.c:main:68: rcode=0
		CLIENT SENDREC msg 5:source=3 type=68 m1i1=5 m1i2=0 m1i3=3 m1p1=(nil) m1p2=(nil) m1p3=(nil) 
		DEBUG 734:dvk_sendrec_T:451: endpoint=3 timeout=5000
		DEBUG 734:dvk_sendrec_T:456: ioctl ret=0 errno=0
		ERROR: test_radar.c:main:68: rcode=0
		CLIENT SENDREC msg 6:source=3 type=68 m1i1=6 m1i2=0 m1i3=3 m1p1=(nil) m1p2=(nil) m1p3=(nil) 
		DEBUG 734:dvk_sendrec_T:451: endpoint=3 timeout=5000
		DEBUG 734:dvk_sendrec_T:456: ioctl ret=0 errno=0
		ERROR: test_radar.c:main:68: rcode=0
		CLIENT SENDREC msg 7:source=3 type=68 m1i1=7 m1i2=0 m1i3=3 m1p1=(nil) m1p2=(nil) m1p3=(nil) 
		DEBUG 734:dvk_sendrec_T:451: endpoint=3 timeout=5000
		DEBUG 734:dvk_sendrec_T:456: ioctl ret=0 errno=0
		ERROR: test_radar.c:main:68: rcode=0
		CLIENT SENDREC msg 8:source=3 type=68 m1i1=8 m1i2=0 m1i3=3 m1p1=(nil) m1p2=(nil) m1p3=(nil) 
		DEBUG 734:dvk_sendrec_T:451: endpoint=3 timeout=5000
		DEBUG 734:dvk_sendrec_T:456: ioctl ret=0 errno=0
		ERROR: test_radar.c:main:68: rcode=0
		CLIENT SENDREC msg 9:source=3 type=68 m1i1=9 m1i2=0 m1i3=3 m1p1=(nil) m1p2=(nil) m1p3=(nil) 
		DEBUG 734:dvk_sendrec_T:451: endpoint=3 timeout=5000
		DEBUG 734:dvk_sendrec_T:456: ioctl ret=0 errno=0
		ERROR: test_radar.c:main:68: rcode=0
		CLIENT SENDREC msg 10:source=3 type=68 m1i1=10 m1i2=0 m1i3=3 m1p1=(nil) m1p2=(nil) m1p3=(nil) 
		DEBUG 734:dvk_sendrec_T:451: endpoint=3 timeout=5000
		DEBUG 734:dvk_sendrec_T:456: ioctl ret=0 errno=0
		ERROR: test_radar.c:main:68: rcode=0
		CLIENT SENDREC msg 11:source=3 type=68 m1i1=11 m1i2=0 m1i3=3 m1p1=(nil) m1p2=(nil) m1p3=(nil) 
		DEBUG 734:dvk_sendrec_T:451: endpoint=3 timeout=5000
		DEBUG 734:dvk_sendrec_T:456: ioctl ret=0 errno=0
		ERROR: test_radar.c:main:68: rcode=0
		CLIENT SENDREC msg 12:source=3 type=68 m1i1=12 m1i2=0 m1i3=3 m1p1=(nil) m1p2=(nil) m1p3=(nil) 
		DEBUG 734:dvk_sendrec_T:451: endpoint=3 timeout=5000
		DEBUG 734:dvk_sendrec_T:456: ioctl ret=0 errno=0
		ERROR: test_radar.c:main:68: rcode=0
		CLIENT SENDREC msg 13:source=3 type=68 m1i1=13 m1i2=0 m1i3=3 m1p1=(nil) m1p2=(nil) m1p3=(nil) 
		DEBUG 734:dvk_sendrec_T:451: endpoint=3 timeout=5000
		DEBUG 734:dvk_sendrec_T:456: ioctl ret=0 errno=0
		ERROR: test_radar.c:main:68: rcode=0
		CLIENT SENDREC msg 14:source=3 type=68 m1i1=14 m1i2=0 m1i3=3 m1p1=(nil) m1p2=(nil) m1p3=(nil) 
		DEBUG 734:dvk_sendrec_T:451: endpoint=3 timeout=5000
		DEBUG 734:dvk_sendrec_T:456: ioctl ret=0 errno=0
		ERROR: test_radar.c:main:68: rcode=0
		CLIENT SENDREC msg 15:source=3 type=68 m1i1=15 m1i2=0 m1i3=3 m1p1=(nil) m1p2=(nil) m1p3=(nil) 
		DEBUG 734:dvk_sendrec_T:451: endpoint=3 timeout=5000
		DEBUG 734:dvk_sendrec_T:456: ioctl ret=0 errno=0
		ERROR: test_radar.c:main:68: rcode=0
		CLIENT SENDREC msg 16:source=3 type=68 m1i1=16 m1i2=0 m1i3=3 m1p1=(nil) m1p2=(nil) m1p3=(nil) 
		DEBUG 734:dvk_sendrec_T:451: endpoint=3 timeout=5000
		DEBUG 734:dvk_sendrec_T:456: ioctl ret=0 errno=0
		ERROR: test_radar.c:main:68: rcode=0
		CLIENT SENDREC msg 17:source=3 type=68 m1i1=17 m1i2=0 m1i3=3 m1p1=(nil) m1p2=(nil) m1p3=(nil) 
		DEBUG 734:dvk_sendrec_T:451: endpoint=3 timeout=5000
		DEBUG 734:dvk_sendrec_T:456: ioctl ret=0 errno=0
		ERROR: test_radar.c:main:68: rcode=0
		CLIENT SENDREC msg 18:source=3 type=68 m1i1=18 m1i2=0 m1i3=3 m1p1=(nil) m1p2=(nil) m1p3=(nil) 
		DEBUG 734:dvk_sendrec_T:451: endpoint=3 timeout=5000
		DEBUG 734:dvk_sendrec_T:456: ioctl ret=0 errno=0
		ERROR: test_radar.c:main:68: rcode=0
		CLIENT SENDREC msg 19:source=3 type=68 m1i1=19 m1i2=0 m1i3=3 m1p1=(nil) m1p2=(nil) m1p3=(nil) 
		DEBUG 734:dvk_sendrec_T:451: endpoint=3 timeout=5000
		DEBUG 734:dvk_sendrec_T:456: ioctl ret=0 errno=0
		ERROR: test_radar.c:main:68: rcode=0
		CLIENT SENDREC msg 20:source=3 type=68 m1i1=20 m1i2=0 m1i3=3 m1p1=(nil) m1p2=(nil) m1p3=(nil) 
		DEBUG 734:dvk_sendrec_T:451: endpoint=3 timeout=5000
		DEBUG 734:dvk_sendrec_T:456: ioctl ret=0 errno=0
		ERROR: test_radar.c:main:68: rcode=0
		CLIENT SENDREC msg 21:source=3 type=68 m1i1=21 m1i2=0 m1i3=3 m1p1=(nil) m1p2=(nil) m1p3=(nil) 
		DEBUG 734:dvk_sendrec_T:451: endpoint=3 timeout=5000
		DEBUG 734:dvk_sendrec_T:456: ioctl ret=0 errno=0
		ERROR: test_radar.c:main:68: rcode=0
		CLIENT SENDREC msg 22:source=3 type=68 m1i1=22 m1i2=0 m1i3=3 m1p1=(nil) m1p2=(nil) m1p3=(nil) 
		DEBUG 734:dvk_sendrec_T:451: endpoint=3 timeout=5000
		DEBUG 734:dvk_sendrec_T:456: ioctl ret=0 errno=0
		ERROR: test_radar.c:main:68: rcode=0
		CLIENT SENDREC msg 23:source=3 type=68 m1i1=23 m1i2=0 m1i3=3 m1p1=(nil) m1p2=(nil) m1p3=(nil) 
		DEBUG 734:dvk_sendrec_T:451: endpoint=3 timeout=5000
		DEBUG 734:dvk_sendrec_T:456: ioctl ret=0 errno=0
		ERROR: test_radar.c:main:68: rcode=0
		CLIENT SENDREC msg 24:source=3 type=68 m1i1=24 m1i2=0 m1i3=3 m1p1=(nil) m1p2=(nil) m1p3=(nil) 
		DEBUG 734:dvk_sendrec_T:451: endpoint=3 timeout=5000
		DEBUG 734:dvk_sendrec_T:456: ioctl ret=0 errno=0
		ERROR: test_radar.c:main:68: rcode=0
		CLIENT SENDREC msg 25:source=3 type=68 m1i1=25 m1i2=0 m1i3=3 m1p1=(nil) m1p2=(nil) m1p3=(nil) 
		DEBUG 734:dvk_sendrec_T:451: endpoint=3 timeout=5000
		DEBUG 734:dvk_sendrec_T:456: ioctl ret=0 errno=0
		ERROR: test_radar.c:main:68: rcode=0
		CLIENT SENDREC msg 26:source=3 type=68 m1i1=26 m1i2=0 m1i3=3 m1p1=(nil) m1p2=(nil) m1p3=(nil) 
		DEBUG 734:dvk_sendrec_T:451: endpoint=3 timeout=5000
		DEBUG 734:dvk_sendrec_T:456: ioctl ret=0 errno=0
		ERROR: test_radar.c:main:68: rcode=0
		CLIENT SENDREC msg 27:source=3 type=68 m1i1=27 m1i2=0 m1i3=3 m1p1=(nil) m1p2=(nil) m1p3=(nil) 
		DEBUG 734:dvk_sendrec_T:451: endpoint=3 timeout=5000
		DEBUG 734:dvk_sendrec_T:456: ioctl ret=0 errno=0
		ERROR: test_radar.c:main:68: rcode=0
		CLIENT SENDREC msg 28:source=3 type=68 m1i1=28 m1i2=0 m1i3=3 m1p1=(nil) m1p2=(nil) m1p3=(nil) 
		DEBUG 734:dvk_sendrec_T:451: endpoint=3 timeout=5000
		DEBUG 734:dvk_sendrec_T:456: ioctl ret=0 errno=0
		ERROR: test_radar.c:main:68: rcode=0
		CLIENT SENDREC msg 29:source=3 type=68 m1i1=29 m1i2=0 m1i3=3 m1p1=(nil) m1p2=(nil) m1p3=(nil) 
		DEBUG 734:dvk_sendrec_T:451: endpoint=3 timeout=5000
		DEBUG 734:dvk_sendrec_T:456: ioctl ret=0 errno=0
		ERROR: test_radar.c:main:68: rcode=0
		
		EN EL MEDIO NODE0 MUERE, NODE1 PASA A SER EL PRIMARIO Y ASI TERMINA EN NODE2  
		root@node2:/usr/src/dvs/dvs-apps/radar# cat /proc/dvs/DC0/procs 
		DC pnr -endp -lpid/vpid- nd flag misc -getf -sndt -wmig -prxy name
		 0   3     3    -1/-1     1 1000    0 27342 27342 27342 27342 RDISK0   <<<< NODE1 PRIMARIO 
 
	
PRUEBA2:
	- Arrancar RDISK en NODE0 
	- Arrancar RDISK en NODE1 
	- Arrancar RADAR en NODE2 
	- Hacer un kill al proceso RDISK de NODE0
	- Verificar que el nuevo primario de RADAR es NODE1 
	- Verificar en NODE2 que el endpoint haya cambiado a NODE1	
	- Volver a arrancar RDISK en NODE0 
	- Verificar que en NODE0 haya quedado como endpoint backup apuntando a NODE1
	- Verificar que en NODE1 este como enpoint local 
	- Verificar que en NODE2 este como enpoint remoto en NODE1 
	
 
PRUEBA3:
	- Arrancar RDISK en NODE0 
	- Arrancar RDISK en NODE1 
	- Arrancar RADAR en NODE2 
	- Desconectar la placa de red de NODE2
	- Ver el estado en NODE2 del endpoint 
	- Conectar la placa de red de NODE2
	- Verificar que el primario de RADAR es NODE0
	- Verificar en NODE2 que el endpoint este en NODE0
	
PRUEBA4:
	- Arrancar RDISK en NODE0 
	- Arrancar RDISK en NODE1 
	- Arrancar RADAR en NODE2 
	- Desconectar la placa de red de NODE2
 	- Hacer KILL a RDISK de NODE0
	- Conectar la placa de red de NODE2
	- Verificar que el primario de RADAR es NODE1 
	- Verificar en NODE2 que el endpoint este en NODE1

PRUEBA5:
	- Arrancar RDISK en NODE0 
	- Arrancar RDISK en NODE1 
	- Arrancar RADAR en NODE2 
	- Arrancar TEST_RADAR en NODE2 
 	- Hacer KILL a RDISK de NODE0
	- Verificar que el primario de RADAR es NODE1 
	- Verificar en NODE2 que el endpoint este en NODE1
	
