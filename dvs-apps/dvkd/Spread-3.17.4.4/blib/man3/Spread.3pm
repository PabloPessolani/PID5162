.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Spread 3pm"
.TH Spread 3pm "2009-10-01" "perl v5.24.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Spread \- Perl extension for the Spread group communication system
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Spread;
\&
\&  # Connect
\&  my($mbox, $private_group) = Spread::connect( {
\&        spread_name => \*(Aq4444@host.domain.com\*(Aq,
\&        private_name => \*(Aqmrcool\*(Aq,
\&        } );
\&
\&  # If you don\*(Aqt give a private name, you\*(Aqll get a unique name from the spread daemon.
\&  my($mailbox, $private_group) = Spread::connect(
\&    spread_name => \*(Aq4444@host.domain.com\*(Aq,
\&  );
\&
\&
\&  # Join and leave groups
\&  my(@group_to_join) = ( \*(AqGroupA\*(Aq, \*(AqGroupB\*(Aq, \*(AqGroupC\*(Aq );
\&  my(@joined_groups) = grep( Spread::join($mbox, $_), @group_to_join );
\&  print "Spread::join \-\- $sperrno"
\&        unless (Spread::leave($mbox, \*(AqGroupC\*(Aq));
\&
\&  # Multicast to group(s)
\&  Spread::multicast($mbox, AGREED_MESS, \*(AqGroupB\*(Aq, 0, "Hey you!");
\&  Spread::multicast($mbox, SAFE_MESS, @joined_groups, 0, "Hey yall!");
\&
\&  # Poll mailbox
\&  my($messsize) = Spread::poll($mbox);
\&  if(defined($messsize)) { print "Next message: $messsize bytes\en"; }
\&  else { print "Spread::poll $sperrno\en"; }
\&
\&  # Receive messages (see spread\*(Aqs man pages for more description)
\&  my($service_type, $sender, $groups, $mess_type, $endian, $message) =
\&        Spread::receive($mbox);
\&  my($service_type, $sender, $groups, $mess_type, $endian, $message) =
\&        Spread::receive($mbox, 1.789);  # 1.789 second timeout on receive
\&
\&  # Disconnect
\&  if(Spread::disconnect($mbox)) { print "Successful disconnect\en"; }
\&  else { print "Spread::disconnect \-\- $sperrno\en"; }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Understanding through practice ;)
.PP
See man pages for SP_connect, SP_join, SP_multicast, SP_receive,
SP_poll, SP_error, SP_leave, SP_disconnect.
.PP
\&\f(CW$sperrno\fR holds either the integer spread error or a descriptive string
depending on the context in which \f(CW$sperrno\fR is used.
.SH "Exported constants"
.IX Header "Exported constants"
The predefined groups of exports in the use statements are as follows:
.PP
use Spread qw(:SP);
.PP
Exports the Spread::connect, Spread::join, Spread::multicast,
Spread::receive, Spread::poll, Spread::error, Spread::leave, and
Spread::disconnect as SP_connect, SP_join, SP_multicast, SP_receive,
SP_poll, SP_error, SP_leave, and SP_disconnect, respectively.
.PP
use Spread qw(:ERROR);
.PP
Exports all of the error conditions.  Please refer to the SP_* C man
pages as the \*(L"\s-1RETURN VALUES\*(R"\s0 there have both identical spellings and
meanings.
.PP
use Spread qw(:MESS);
.PP
Exports all of the message types (this is returned as service type by
the Spread::receive function and is the request service type of the
Spread::multicast function).  The actual meaning of these orderings
and assurances are not simple to explain without a basic understanding
of group communication systems.  For more information on this topic,
please visit the Spread web site at http://www.spread.org/
.PP
All constants in alphabetical order:
.PP
.Vb 10
\&  ACCEPT_SESSION
\&  AGREED_MESS
\&  BUFFER_TOO_SHORT
\&  CAUSAL_MESS
\&  CAUSED_BY_DISCONNECT
\&  CAUSED_BY_JOIN
\&  CAUSED_BY_LEAVE
\&  CAUSED_BY_NETWORK
\&  CONNECTION_CLOSED
\&  COULD_NOT_CONNECT
\&  FIFO_MESS
\&  HIGH_PRIORITY
\&  ILLEGAL_GROUP
\&  ILLEGAL_MESSAGE
\&  ILLEGAL_SERVICE
\&  ILLEGAL_SESSION
\&  ILLEGAL_SPREAD
\&  LOW_PRIORITY
\&  MAX_SCATTER_ELEMENTS
\&  MEDIUM_PRIORITY
\&  MEMBERSHIP_MESS
\&  REGULAR_MESS
\&  REG_MEMB_MESS
\&  REJECT_ILLEGAL_NAME
\&  REJECT_MESS
\&  REJECT_NOT_UNIQUE
\&  REJECT_NO_NAME
\&  REJECT_QUOTA
\&  REJECT_VERSION
\&  RELIABLE_MESS
\&  SAFE_MESS
\&  SELF_DISCARD
\&  TRANSITION_MESS
\&  UNRELIABLE_MESS
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Theo Schlossnagle <jesus@cnds.jhu.edu>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Various spread documentation at http://www.spread.org/.
